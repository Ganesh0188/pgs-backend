generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = ""
}

model User {
  id                  Int      @id @default(autoincrement())
  fullName            String
  email               String   @unique
  mobileNumberPrimary String
  mobileNumberSecondary String?
  address             String
  password            String   // Store hashed password
  occupation          String
  identityDocImage    String  // URL to identity document image
  profileImage        String
  createdAt           DateTime @default(now()) // Account creation date
  updatedAt           DateTime @updatedAt
  residents           Resident[] // One user can have multiple resident records (stay history)
}

model Owner {
  id            Int      @id @default(autoincrement())
  fullName      String
  email         String   @unique
  mobileNumber  String
  address       String
  profileImage  String?  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  hostels       Hostel[] // One owner can have multiple hostels
}

model Hostel {
  id               Int      @id @default(autoincrement())
  ownerId          Int
  owner            Owner    @relation(fields: [ownerId], references: [id])
  name             String
  description      String?
  address          String
  mapLocationLat   Float?   // Latitude for Google Maps
  mapLocationLng   Float?   // Longitude for Google Maps
  contactNumber    String
  email            String   @unique
  amenities        String[] // Array of amenities (e.g., ["WiFi", "AC", "Laundry"])
  monthlyRevenue   Float    @default(0.0)
  roomTypes        Json
  images           String[] // Array of image URLs
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  rooms            Room[]
}

model Room {
  id            Int      @id @default(autoincrement())
  hostelId      Int
  hostel        Hostel   @relation(fields: [hostelId], references: [id])
  roomType      Int
  ac            Boolean
  price         Float
  bathrooms     Int    
  floorNumber   Int
  roomNumber    String   @unique // Unique within hostel
  status        RoomStatus @default(AVAILABLE)
  occupiedBeds  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  residents     Resident[] // One room can have multiple residents
}

model Resident {
  id                  Int      @id @default(autoincrement())
  roomId              Int
  room                Room     @relation(fields: [roomId], references: [id])
  residentId          Int      // References User.id
  user                User     @relation(fields: [residentId], references: [id]) // Relation to User
  fullName            String
  mobileNumberPrimary String
  mobileNumberSecondary String?
  email               String?  @unique
  address             String
  occupation          String?
  identityDocImage    String?  // URL to identity document image
  profileImage        String?  // URL to profile image
  dateOfRegistration  DateTime @default(now()) // Date user joined the hostel
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  payments            Payment[]
}

model Payment {
  id            Int      @id @default(autoincrement())
  residentId    Int
  resident      Resident @relation(fields: [residentId], references: [id])
  month         String   // e.g., "2025-05"
  amount        Float
  paymentType   PaymentType
  paidDate      DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

enum PaymentType {
  CASH
  UPI
  BANK_TRANSFER
}

